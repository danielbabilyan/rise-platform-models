generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model App {
  id            String        @id @default(uuid())
  secret        String
  name          String
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  access_tokens AccessToken[]

  @@unique([id, secret], name: "AppUnique")
  @@map("apps")
}

model AccessToken {
  id           String   @id @default(uuid())
  app_id       String
  account_id   String
  access_token String
  scopes       Json
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  app          App      @relation(fields: [app_id], references: [id])
  account      Account  @relation(fields: [account_id], references: [id])

  @@unique([app_id, account_id], name: "AccessTokenUnique")
  @@map("access_tokens")
}

model PlatformAccessToken {
  id           String   @id @default(uuid())
  platform     Platform
  account_id   String
  access_token String
  meta         Json
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  account      Account  @relation(fields: [account_id], references: [id])

  @@map("platform_access_tokens")
}

model Profile {
  id            String   @id @default(uuid())
  sub           String   @unique
  email         String?
  name          String?
  profile_image String?  @db.VarChar(200)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  users         User[]

  @@map("profiles")
}

model User {
  id         String     @id @default(uuid())
  profile_id String
  account_id String
  status     UserStatus
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  roles      Role[]
  profile    Profile    @relation(fields: [profile_id], references: [id])
  account    Account    @relation(fields: [account_id], references: [id])

  @@map("users")
}

model Role {
  id         String   @id @default(uuid())
  user_id    String
  name       String
  scopes     Json
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])

  @@map("roles")
}

model Account {
  id                     String                @id @default(uuid())
  domain                 String
  name                   String
  licenses               Json
  created_at             DateTime              @default(now())
  updated_at             DateTime              @updatedAt
  users                  User[]
  access_tokens          AccessToken[]
  platform_access_tokens PlatformAccessToken[]

  @@map("accounts")
}

enum UserStatus {
  ACTIVE
  DISABLED
  INVITED
}

enum Platform {
  SHOPIFY
}
